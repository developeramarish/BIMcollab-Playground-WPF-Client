// <auto-generated/>
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class BC_Annotation : BC_ControllableData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BC_Annotation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BIMcollab_AnnotationPINVOKE.BC_Annotation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BC_Annotation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BC_Annotation() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BIMcollab_AnnotationPINVOKE.delete_BC_Annotation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BC_Annotation() : this(BIMcollab_AnnotationPINVOKE.new_BC_Annotation(), true) {
  }

  public BC_3DPoint GetNormal() {
    global::System.IntPtr cPtr = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetNormal(swigCPtr);
    BC_3DPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_3DPoint(cPtr, false);
    return ret;
  }

  public BC_3DPoint GetOrigin() {
    global::System.IntPtr cPtr = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetOrigin(swigCPtr);
    BC_3DPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_3DPoint(cPtr, false);
    return ret;
  }

  public BC_3DPoint GetWidthPoint() {
    global::System.IntPtr cPtr = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetWidthPoint(swigCPtr);
    BC_3DPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_3DPoint(cPtr, false);
    return ret;
  }

  public BC_3DPoint GetHeightPoint() {
    global::System.IntPtr cPtr = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetHeightPoint(swigCPtr);
    BC_3DPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_3DPoint(cPtr, false);
    return ret;
  }

  public uint GetAnnotationType() {
    uint ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetAnnotationType(swigCPtr);
    return ret;
  }

  public double GetLineWidth() {
    double ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetLineWidth(swigCPtr);
    return ret;
  }

  public string GetColor() {
    string ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetColor(swigCPtr);
    return ret;
  }

  public uint GetLineType() {
    uint ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetLineType(swigCPtr);
    return ret;
  }

  public uint GetLineStartPointSymbol() {
    uint ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetLineStartPointSymbol(swigCPtr);
    return ret;
  }

  public uint GetLineEndPointSymbol() {
    uint ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetLineEndPointSymbol(swigCPtr);
    return ret;
  }

  public string GetText() {
    string ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetText(swigCPtr);
    return ret;
  }

  public double GetCharacterWidth() {
    double ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetCharacterWidth(swigCPtr);
    return ret;
  }

  public void SetLineParameters(uint lineType, uint lineStartPointSymbol, uint lineEndPointSymbol) {
    BIMcollab_AnnotationPINVOKE.BC_Annotation_SetLineParameters(swigCPtr, lineType, lineStartPointSymbol, lineEndPointSymbol);
    if (BIMcollab_AnnotationPINVOKE.SWIGPendingException.Pending) throw BIMcollab_AnnotationPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTextParameters(string text, double charWidth) {
    BIMcollab_AnnotationPINVOKE.BC_Annotation_SetTextParameters(swigCPtr, text, charWidth);
    if (BIMcollab_AnnotationPINVOKE.SWIGPendingException.Pending) throw BIMcollab_AnnotationPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetExtendedData() {
    string ret = BIMcollab_AnnotationPINVOKE.BC_Annotation_GetExtendedData(swigCPtr);
    return ret;
  }

  public void SetExtendedData(string data) {
    BIMcollab_AnnotationPINVOKE.BC_Annotation_SetExtendedData(swigCPtr, data);
    if (BIMcollab_AnnotationPINVOKE.SWIGPendingException.Pending) throw BIMcollab_AnnotationPINVOKE.SWIGPendingException.Retrieve();
  }

}
