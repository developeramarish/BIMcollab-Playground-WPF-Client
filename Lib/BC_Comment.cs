// <auto-generated/>
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class BC_Comment : BC_ControllableData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BC_Comment(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BIMcollab_CommentPINVOKE.BC_Comment_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BC_Comment obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BC_Comment() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BIMcollab_CommentPINVOKE.delete_BC_Comment(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public string GetText() {
    string ret = BIMcollab_CommentPINVOKE.BC_Comment_GetText(swigCPtr);
    return ret;
  }

  public void SetText(string commentText) {
    BIMcollab_CommentPINVOKE.BC_Comment_SetText(swigCPtr, commentText);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetCreatedOn() {
    string ret = BIMcollab_CommentPINVOKE.BC_Comment_GetCreatedOn(swigCPtr);
    return ret;
  }

  public bool HasViewPoint() {
    bool ret = BIMcollab_CommentPINVOKE.BC_Comment_HasViewPoint(swigCPtr);
    return ret;
  }

  public BC_ViewPoint GetViewPoint() {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_GetViewPoint(swigCPtr);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetViewPointGuid() {
    string ret = BIMcollab_CommentPINVOKE.BC_Comment_GetViewPointGuid(swigCPtr);
    return ret;
  }

  public BC_ViewPoint CreateViewPoint() {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_CreateViewPoint__SWIG_0(swigCPtr);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_ViewPoint CreateViewPointWithSortedComponents() {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_CreateViewPointWithSortedComponents__SWIG_0(swigCPtr);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_ViewPoint CreateViewPoint(string viewpointGuid) {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_CreateViewPoint__SWIG_1(swigCPtr, viewpointGuid);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_ViewPoint CreateViewPointWithSortedComponents(string viewpointGuid) {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_CreateViewPointWithSortedComponents__SWIG_1(swigCPtr, viewpointGuid);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_ViewPoint CreateDuplicateViewPoint() {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_CreateDuplicateViewPoint(swigCPtr);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetViewPoint(BC_ViewPoint pViewPoint) {
    BIMcollab_CommentPINVOKE.BC_Comment_SetViewPoint(swigCPtr, BC_ViewPoint.getCPtr(pViewPoint));
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveViewPoint() {
    BIMcollab_CommentPINVOKE.BC_Comment_RemoveViewPoint(swigCPtr);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsOperationAllowed(BC_Operation operation) {
    bool ret = BIMcollab_CommentPINVOKE.BC_Comment_IsOperationAllowed(swigCPtr, (int)operation);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_User GetModifier() {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_GetModifier(swigCPtr);
    BC_User ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_User(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetModifierIndex() {
    uint ret = BIMcollab_CommentPINVOKE.BC_Comment_GetModifierIndex(swigCPtr);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetModifiedOn() {
    string ret = BIMcollab_CommentPINVOKE.BC_Comment_GetModifiedOn(swigCPtr);
    return ret;
  }

  public string GetGuid() {
    string ret = BIMcollab_CommentPINVOKE.BC_Comment_GetGuid(swigCPtr);
    return ret;
  }

  public BC_User GetCreator() {
    global::System.IntPtr cPtr = BIMcollab_CommentPINVOKE.BC_Comment_GetCreator(swigCPtr);
    BC_User ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_User(cPtr, false);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetCreatorIndex() {
    uint ret = BIMcollab_CommentPINVOKE.BC_Comment_GetCreatorIndex(swigCPtr);
    if (BIMcollab_CommentPINVOKE.SWIGPendingException.Pending) throw BIMcollab_CommentPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsPublished() {
    bool ret = BIMcollab_CommentPINVOKE.BC_Comment_IsPublished(swigCPtr);
    return ret;
  }

  public BC_Comment() : this(BIMcollab_CommentPINVOKE.new_BC_Comment(), true) {
  }

}
