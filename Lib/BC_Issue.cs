// <auto-generated/>
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class BC_Issue : BC_ControllableData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BC_Issue(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BIMcollab_IssuePINVOKE.BC_Issue_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BC_Issue obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BC_Issue() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BIMcollab_IssuePINVOKE.delete_BC_Issue(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void Activate() {
    BIMcollab_IssuePINVOKE.BC_Issue_Activate(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ActivateLimited() {
    BIMcollab_IssuePINVOKE.BC_Issue_ActivateLimited(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsComplete() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_IsComplete(swigCPtr);
    return ret;
  }

  public string GetGuid() {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetGuid(swigCPtr);
    return ret;
  }

  public int GetIndex() {
    int ret = BIMcollab_IssuePINVOKE.BC_Issue_GetIndex(swigCPtr);
    return ret;
  }

  public string GetTitle() {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetTitle(swigCPtr);
    return ret;
  }

  public void SetTitle(string title) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetTitle(swigCPtr, title);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetDescription() {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetDescription(swigCPtr);
    return ret;
  }

  public void SetDescription(string description) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetDescription(swigCPtr, description);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public BC_User GetOwner() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetOwner(swigCPtr);
    BC_User ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_User(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetOwnerIndex() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetOwnerIndex(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetOwner(BC_User pOwner) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetOwner(swigCPtr, BC_User.getCPtr(pOwner));
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOwnerByIndex(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetOwnerByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetModifiedOn() {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetModifiedOn(swigCPtr);
    return ret;
  }

  public BC_User GetModifier() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetModifier(swigCPtr);
    BC_User ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_User(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetModifierIndex() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetModifierIndex(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetCreatedOn() {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetCreatedOn(swigCPtr);
    return ret;
  }

  public string GetDeadline() {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetDeadline(swigCPtr);
    return ret;
  }

  public void SetDeadline(string deadline) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetDeadline(swigCPtr, deadline);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public BC_User GetCreator() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetCreator(swigCPtr);
    BC_User ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_User(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetCreatorIndex() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetCreatorIndex(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumberOfReferenceLinks() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetNumberOfReferenceLinks(swigCPtr);
    return ret;
  }

  public string GetReferenceLinkByIndex(uint idx) {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetReferenceLinkByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddReferenceLink(string referenceLink) {
    BIMcollab_IssuePINVOKE.BC_Issue_AddReferenceLink(swigCPtr, referenceLink);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveReferenceLinkByIndex(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveReferenceLinkByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveReferenceLink(string referenceLink) {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveReferenceLink(swigCPtr, referenceLink);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllReferenceLinks() {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveAllReferenceLinks(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetIssueType() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetIssueType(swigCPtr);
    return ret;
  }

  public void SetIssueType(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetIssueType(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetStatus() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetStatus(swigCPtr);
    return ret;
  }

  public void SetStatus(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetStatus(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumberOfLabels() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetNumberOfLabels(swigCPtr);
    return ret;
  }

  public uint GetLabelByIndex(uint idx) {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetLabelByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddLabel(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_AddLabel(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveLabelByIndex(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveLabelByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveLabel(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveLabel(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllLabels() {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveAllLabels(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetPriority() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetPriority(swigCPtr);
    return ret;
  }

  public void SetPriority(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetPriority(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetVisibility() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetVisibility(swigCPtr);
    return ret;
  }

  public void SetVisibility(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetVisibility(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetArea() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetArea(swigCPtr);
    return ret;
  }

  public void SetArea(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetArea(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetMilestone() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetMilestone(swigCPtr);
    return ret;
  }

  public void SetMilestone(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetMilestone(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void IncludeInPublish(bool include) {
    BIMcollab_IssuePINVOKE.BC_Issue_IncludeInPublish(swigCPtr, include);
  }

  public bool IsIncludedInPublish() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_IsIncludedInPublish(swigCPtr);
    return ret;
  }

  public void OverwriteServerChanges() {
    BIMcollab_IssuePINVOKE.BC_Issue_OverwriteServerChanges(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Publish() {
    BIMcollab_IssuePINVOKE.BC_Issue_Publish(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void PublishAsync(bool discard) {
    BIMcollab_IssuePINVOKE.BC_Issue_PublishAsync(swigCPtr, discard);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsPublishActive() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_IsPublishActive(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void WaitForPublishToFinish() {
    BIMcollab_IssuePINVOKE.BC_Issue_WaitForPublishToFinish(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reload() {
    BIMcollab_IssuePINVOKE.BC_Issue_Reload(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumberOfComments() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetNumberOfComments(swigCPtr);
    return ret;
  }

  public BC_Comment GetCommentByIndex(uint idx) {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetCommentByIndex(swigCPtr, idx);
    BC_Comment ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_Comment(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumberOfViewPoints() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetNumberOfViewPoints(swigCPtr);
    return ret;
  }

  public BC_ViewPoint GetViewPointByIndex(uint idx) {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetViewPointByIndex(swigCPtr, idx);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_ViewPoint GetViewPointByGuid(string guid) {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetViewPointByGuid(swigCPtr, guid);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_SnapShot GetDefaultSnapShot() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetDefaultSnapShot(swigCPtr);
    BC_SnapShot ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_SnapShot(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasDefaultSnapShot() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_HasDefaultSnapShot(swigCPtr);
    return ret;
  }

  public BC_ViewPoint GetDefaultViewPoint() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetDefaultViewPoint(swigCPtr);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_Comment CreateComment() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_CreateComment(swigCPtr);
    BC_Comment ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_Comment(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CanRemoveCommentByIndex(uint idx) {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_CanRemoveCommentByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveCommentByIndex(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveCommentByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public BC_ViewPoint CreateViewPoint() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_CreateViewPoint(swigCPtr);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_ViewPoint CreateViewPointWithSortedComponents() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_CreateViewPointWithSortedComponents(swigCPtr);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_ViewPoint CreateDuplicateViewPoint(string viewpointGuid) {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_CreateDuplicateViewPoint(swigCPtr, viewpointGuid);
    BC_ViewPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_ViewPoint(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasChanges() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_HasChanges(swigCPtr);
    return ret;
  }

  public bool HasChangedProperties() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_HasChangedProperties(swigCPtr);
    return ret;
  }

  public bool HasChangedHotProperties() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_HasChangedHotProperties(swigCPtr);
    return ret;
  }

  public bool HasChangedColdProperties() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_HasChangedColdProperties(swigCPtr);
    return ret;
  }

  public bool HasUpdates() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_HasUpdates(swigCPtr);
    return ret;
  }

  public bool IsOperationAllowed(BC_Operation operation, uint target) {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_IsOperationAllowed__SWIG_0(swigCPtr, (int)operation, target);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsOperationAllowed(BC_Operation operation) {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_IsOperationAllowed__SWIG_1(swigCPtr, (int)operation);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasActiveError() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_HasActiveError(swigCPtr);
    return ret;
  }

  public BC_Message GetActiveError() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetActiveError(swigCPtr);
    BC_Message ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_Message(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumberOfMessages() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetNumberOfMessages(swigCPtr);
    return ret;
  }

  public BC_Message GetMessageByIndex(uint idx) {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetMessageByIndex(swigCPtr, idx);
    BC_Message ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_Message(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetBIMcollabUrl() {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetBIMcollabUrl(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumberOfIfcFiles() {
    uint ret = BIMcollab_IssuePINVOKE.BC_Issue_GetNumberOfIfcFiles(swigCPtr);
    return ret;
  }

  public BC_IfcFile GetIfcFileByIndex(uint idx) {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_GetIfcFileByIndex(swigCPtr, idx);
    BC_IfcFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_IfcFile(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_IfcFile CreateIfcFile() {
    global::System.IntPtr cPtr = BIMcollab_IssuePINVOKE.BC_Issue_CreateIfcFile(swigCPtr);
    BC_IfcFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new BC_IfcFile(cPtr, false);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveIfcFileByIndex(uint idx) {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveIfcFileByIndex(swigCPtr, idx);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllIfcFiles() {
    BIMcollab_IssuePINVOKE.BC_Issue_RemoveAllIfcFiles(swigCPtr);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetClientParameter(string client, string parameter) {
    string ret = BIMcollab_IssuePINVOKE.BC_Issue_GetClientParameter(swigCPtr, client, parameter);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetClientParameter(string client, string parameter, string value) {
    BIMcollab_IssuePINVOKE.BC_Issue_SetClientParameter(swigCPtr, client, parameter, value);
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsPublished() {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_IsPublished(swigCPtr);
    return ret;
  }

  public bool CanUserAccessThisIssue(BC_User pNotifiedUser) {
    bool ret = BIMcollab_IssuePINVOKE.BC_Issue_CanUserAccessThisIssue(swigCPtr, BC_User.getCPtr(pNotifiedUser));
    if (BIMcollab_IssuePINVOKE.SWIGPendingException.Pending) throw BIMcollab_IssuePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BC_Issue() : this(BIMcollab_IssuePINVOKE.new_BC_Issue(), true) {
  }

}
